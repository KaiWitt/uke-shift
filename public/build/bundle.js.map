{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/uke.ts","../../src/components/Uke.svelte","../../src/components/ChordPicker.svelte","../../src/components/Logo.svelte","../../src/components/Footer.svelte","../../rust/uke-shift/pkg/uke_shift.js","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.42.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export { createStrings, createFrets, createNut, createMarks, createChords, arrayToChords };\r\nfunction createStrings(width, height) {\r\n    const strings = {\r\n        color: 'black',\r\n        size: 3,\r\n        len: 0.948 * width,\r\n        x1: 0.05 * width,\r\n        y: [\r\n            0.1 * height,\r\n            (0.1 + 8 / 30) * height,\r\n            (0.1 + (2 * 8) / 30) * height,\r\n            0.9 * height,\r\n        ],\r\n    };\r\n    return strings;\r\n}\r\nfunction createFrets(ukeStrings, fretCount) {\r\n    var posX = [];\r\n    for (var i = 0; i <= fretCount; i++) {\r\n        posX.push(ukeStrings.x1 + (i / fretCount) * ukeStrings.len);\r\n    }\r\n    const frets = {\r\n        color: \"grey\",\r\n        size: 2,\r\n        x: posX,\r\n        y1: ukeStrings.y[0],\r\n        y2: ukeStrings.y.slice(-1)[0],\r\n    };\r\n    return frets;\r\n}\r\nfunction createNut(frets) {\r\n    const nut = {\r\n        color: \"black\",\r\n        size: 4 * frets.size,\r\n        x: frets.x[0],\r\n        y1: frets.y1,\r\n        y2: frets.y2,\r\n    };\r\n    return nut;\r\n}\r\nfunction createMarks(frets, r) {\r\n    const fretStep = (frets.x.slice(-1)[0] - frets.x[0]) / (frets.x.length - 1);\r\n    var marks = [];\r\n    for (var i = 0; i <= frets.x.length; i++) {\r\n        if ([3, 5, 7, 10, 12, 15].includes(i)) {\r\n            const height = (frets.y2 + frets.y1) / 2;\r\n            const x = { x: frets.x[0] + (i - 0.5) * fretStep, y: height, r: r };\r\n            marks.push(x);\r\n        }\r\n    }\r\n    return marks;\r\n}\r\nfunction createChords(ukeStrings, frets, chords, r) {\r\n    let colors = [\"lightgreen\", \"skyblue\", \"coral\", \"gold\", \"mediumpurple\", \"pink\"];\r\n    var notes = [];\r\n    for (var i = 0; i < chords.length; i++) {\r\n        notes.push(createChord(ukeStrings, frets, chords[i], r, colors[i]));\r\n    }\r\n    return notes.flat();\r\n}\r\nfunction createChord(ukeStrings, frets, chord, r, color) {\r\n    // 4 Strings make 3 sections\r\n    const stringStep = (ukeStrings.y.slice(-1)[0] - ukeStrings.y[0]) / (ukeStrings.y.length - 1);\r\n    const fretStep = (frets.x.slice(-1)[0] - frets.x[0]) / (frets.x.length - 1);\r\n    var notes = [];\r\n    for (var i = 0; i < chord.length; i++) {\r\n        const note = {\r\n            color: color,\r\n            fret: (chord[i] - 0.5) * fretStep + frets.x[0],\r\n            stringo: (chord.length - 1 - i) * stringStep + ukeStrings.y[0],\r\n            r: r,\r\n        };\r\n        notes.push(note);\r\n    }\r\n    return notes;\r\n}\r\nfunction arrayToChords(array) {\r\n    var chords = [];\r\n    for (var i = 0; i < array.length / 4; i++) {\r\n        chords.push(Array.from(array.subarray(4 * i, 4 * i + 4)));\r\n    }\r\n    return chords;\r\n}\r\n","<script lang=\"ts\">\r\n    import {\r\n        createStrings,\r\n        createFrets,\r\n        createNut,\r\n        createMarks,\r\n        createChords,\r\n    } from \"../uke\";\r\n\r\n    export let width: number = 0;\r\n    export let height: number = 0;\r\n    export let chords: number[][] = [];\r\n    export let radius: number = 0;\r\n\r\n    const fretCount = 17;\r\n    $: markRadius = 0.5 * radius;\r\n    $: strings = createStrings(width, height);\r\n    $: frets = createFrets(strings, fretCount);\r\n    $: nut = createNut(frets);\r\n    $: marks = createMarks(frets, markRadius);\r\n    $: notes = createChords(strings, frets, chords, radius);\r\n</script>\r\n\r\n<div>\r\n    <svg {height} {width}>\r\n        <!-- Frets -->\r\n        {#each frets.x as x}\r\n            <line\r\n                x1={x}\r\n                y1={frets.y1}\r\n                x2={x}\r\n                y2={frets.y2}\r\n                style=\"stroke:{frets.color};stroke-width:{frets.size}\"\r\n            />\r\n        {/each}\r\n\r\n        <!-- Nut -->\r\n        <line\r\n            x1={nut.x}\r\n            y1={nut.y1}\r\n            x2={nut.x}\r\n            y2={nut.y2}\r\n            style=\"stroke:{nut.color};stroke-width:{nut.size}\"\r\n        />\r\n\r\n        <!-- 4 Uke Strings -->\r\n        {#each strings.y as y}\r\n            <line\r\n                x1={strings.x1}\r\n                y1={y}\r\n                x2={strings.x1 + strings.len}\r\n                y2={y}\r\n                style=\"stroke:{strings.color};stroke-width:{strings.size}\"\r\n            />\r\n        {/each}\r\n\r\n        <!-- Fret marker -->\r\n        {#each marks as { x, y, r }}\r\n            <circle cx={x} cy={y} {r} fill=\"lightgrey\" />\r\n        {/each}\r\n\r\n        <!-- Chords -->\r\n        {#each notes as note}\r\n            <circle\r\n                cx={note.fret}\r\n                cy={note.stringo}\r\n                r={note.r}\r\n                fill={note.color}\r\n            />\r\n        {/each}\r\n    </svg>\r\n</div>\r\n","<script lang=\"ts\">\r\n    const chords: string[] = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"];\r\n\r\n    // All types that the ukebox crate recognizes\r\n    const flavours: string[] = [\r\n        \"m\",\r\n        \"sus2\",\r\n        \"sus4\",\r\n        \"aug\",\r\n        \"dim\",\r\n        \"7\",\r\n        \"m7\",\r\n        \"maj7\",\r\n        \"mMaj7\",\r\n        \"aug7\",\r\n        \"augMaj7\",\r\n        \"dim7\",\r\n        \"m7b5\",\r\n    ].sort();\r\n\r\n    export let selectedChord: string = \"\";\r\n    export let selectedFlavour: string = \"\";\r\n\r\n    function setChord(chord: string) {\r\n        if (selectedChord === chord) {\r\n            selectedChord = \"\";\r\n            selectedFlavour = \"\";\r\n        } else {\r\n            selectedChord = chord;\r\n        }\r\n    }\r\n\r\n    function setFlavour(flavour: string) {\r\n        if (selectedChord === \"\") {\r\n            return;\r\n        }\r\n        if (selectedFlavour === flavour) {\r\n            selectedFlavour = \"\";\r\n        } else {\r\n            selectedFlavour = flavour;\r\n        }\r\n    }\r\n</script>\r\n\r\n<div class=\"outer\">\r\n    <!-- Chords -->\r\n    <div class=\"flavours\">\r\n        {#each chords as chord}\r\n            <button\r\n                class:active={selectedChord === chord}\r\n                on:click={() => setChord(chord)}>{chord}</button\r\n            >\r\n        {/each}\r\n    </div>\r\n\r\n    <!-- Flavours -->\r\n    <div class=\"flavours\">\r\n        {#each flavours as flavour}\r\n            <button\r\n                class:active={selectedFlavour === flavour}\r\n                on:click={() => setFlavour(flavour)}>{flavour}</button\r\n            >\r\n        {/each}\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .outer {\r\n        width: 100%;\r\n    }\r\n    .flavours {\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    button {\r\n        margin: 1px 2px;\r\n    }\r\n\r\n    .active {\r\n        background-color: #ff3e00;\r\n        color: white;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    export let logo;\r\n</script>\r\n\r\n<h1>{logo}</h1>\r\n\r\n<style>\r\n    h1 {\r\n        color: #ff3e00;\r\n        font-size: 4em;\r\n        font-weight: 100;\r\n        text-align: center;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    export let name: string;\r\n    export let website: string;\r\n    export let github: string;\r\n</script>\r\n\r\n<div>\r\n    <p>\r\n        Build by <a href={website}>{name}</a>\r\n        <br />\r\n        Source code on <a href={github}>GitHub</a>\r\n    </p>\r\n</div>\r\n\r\n<style>\r\n</style>\r\n","\nlet wasm;\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* Returns unique fret positions of a chord as a slice of fret IDs.\n* Every four items are part of a chord.\n* @param {string} chord\n* @param {string} flavour\n* @returns {Uint8Array}\n*/\nexport function chord_positions(chord, flavour) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(chord, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(flavour, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.chord_positions(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL('uke_shift_bg.wasm', import.meta.url);\n    }\n    const imports = {};\n\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","<script lang=\"ts\">\r\n\timport { arrayToChords } from \"./uke\";\r\n\timport Uke from \"./components/Uke.svelte\";\r\n\timport ChordPicker from \"./components/ChordPicker.svelte\";\r\n\timport Logo from \"./components/Logo.svelte\";\r\n\timport Footer from \"./components/Footer.svelte\";\r\n\timport init, { chord_positions } from \"../rust/uke-shift/pkg/uke_shift.js\";\r\n\r\n\texport let name: string;\r\n\texport let website: string;\r\n\texport let github: string;\r\n\texport let logo: string;\r\n\r\n\tlet width: number;\r\n\r\n\tlet chord: string = \"\";\r\n\tlet flavour: string = \"\";\r\n\tlet chords: number[][] = [];\r\n\r\n\tasync function run(c: string, f: string) {\r\n\t\tinit();\r\n\t\tchords = arrayToChords(chord_positions(c, f));\r\n\t}\r\n\r\n\t$: run(chord, flavour);\r\n</script>\r\n\r\n<main>\r\n\t<div bind:clientWidth={width}>\r\n\t\t<Logo {logo} />\r\n\t\t<ChordPicker\r\n\t\t\tbind:selectedChord={chord}\r\n\t\t\tbind:selectedFlavour={flavour}\r\n\t\t/>\r\n\t\t<Uke\r\n\t\t\twidth={0.95 * width}\r\n\t\t\theight={(1 / 6) * 0.95 * width}\r\n\t\t\tradius={0.013 * 0.95 * width}\r\n\t\t\t{chords}\r\n\t\t/>\r\n\t\t<Footer {name} {website} {github} />\r\n\t</div>\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\ttext-align: center;\r\n\t}\r\n</style>\r\n","import App from './App.svelte';\r\nconst app = new App({\r\n    target: document.body,\r\n    props: {\r\n        name: 'Kai Wolfram',\r\n        website: 'https://www.kaiwolfram.com/',\r\n        github: 'https://github.com/KaiWitt/uke-shift',\r\n        logo: 'UkeShift'\r\n    }\r\n});\r\nexport default app;\r\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","style","setProperty","crossorigin","current_component","is_crossorigin","undefined","window","parent","error","toggle_class","toggle","classList","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","add_flush_callback","flushing","seen_callbacks","Set","flush","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","transition_in","block","local","delete","transition_out","o","outros","c","bind","index","props","bound","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","indexOf","splice","$set","$$props","obj","$$set","keys","createChord","ukeStrings","frets","chord","r","color","stringStep","y","slice","fretStep","x","notes","note","fret","stringo","y1","y2","size","x1","len","width","height","chords","radius","markRadius","strings","createStrings","fretCount","posX","createFrets","nut","createNut","marks","includes","createMarks","colors","flat","createChords","flavours","sort","selectedChord","selectedFlavour","setChord","setFlavour","flavour","logo","website","github","wasm","WASM_VECTOR_LEN","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","ptr","subarray","mem","offset","code","charCodeAt","cachegetInt32Memory0","getInt32Memory0","Int32Array","chord_positions","retptr","__wbindgen_add_to_stack_pointer","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","ptr1","len1","r0","r1","v2","__wbindgen_free","async","input","URL","Request","fetch","module","imports","Response","WebAssembly","instantiateStreaming","e","headers","get","console","warn","bytes","arrayBuffer","instantiate","Instance","load","exports","__wbindgen_wasm_module","getComputedStyle","position","iframe","tabIndex","unsubscribe","src","source","contentWindow","onload","__awaiter","thisArg","_arguments","P","generator","f","array","arrayToChords","body"],"mappings":"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"}